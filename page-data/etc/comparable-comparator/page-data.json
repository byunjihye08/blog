{"componentChunkName":"component---src-templates-post-template-jsx","path":"/etc/comparable-comparator/","result":{"data":{"site":{"siteMetadata":{"title":"변지혜 블로그","subtitle":"행동하는 개발자","copyright":"© All rights reserved.","author":{"name":"변지혜","twitter":"#"},"disqusShortname":"regyu","url":"https://wisdom08.netlify.com/"}},"markdownRemark":{"id":"a4a62893-ae5c-53b5-b61f-5ad9b754f8df","html":"<h2>TMI</h2>\n<p><a href=\"https://programmers.co.kr/learn/courses/10004\">코딩테스트와 실무 역량 모두 잡는 알고리즘 스터디(Java) 2기 | 프로그래머스</a></p>\n<p>시작부터 TMI 가 시작된다. 프로그래머스에서 진행하는 코딩테스트-JAVA 를 온라인 스터디 진행하면서 배운 내용을 정리 한다. </p>\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/42840\">알고리즘 연습 - 모의고사 | 프로그래머스</a></p>\n<p>내가 풀었던 문제 중 모의 고사 문제를 풀면서 객체를 Sort 하거나 MAX 값을 얻기 위해 Comparable, Comparator를 사용하게 되었다.</p>\n<h2>객체 <strong>기준!!</strong></h2>\n<p><img src=\"Untitled-6e740739-1d83-497d-8be2-d0f841e5b809.png\"></p>\n<ul>\n<li>\n<p>객체의 정렬 기준 예시) Student</p>\n<ul>\n<li>Student.name 오름차순으로 정렬!!</li>\n<li>\n<p>Student.age 내림차순으로 정렬!!</p>\n<ul>\n<li>age가 같으면 name 내림차순으로 정렬!!</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>객체의 정렬의 기준을 정하는 두가지 인터페이스</h2>\n<ol>\n<li>\n<p>Comparable : 클래스 객체에 정렬 기준을 부과 할 때 사용하는 인터페이스 </p>\n<ul>\n<li>정렬 기준: 클래스 객체 내부에 명시</li>\n<li>\n<p>ex) sort(list&#x3C; Student>)</p>\n<ul>\n<li>class Student implements Comparable&#x3C; Student></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Comparator: (클래스 객체)컬렉션을 정렬할때 기준을 부과 해주기 위한 기능적 인터페이스</p>\n<ul>\n<li>정렬 기준: 메서드 사용시 메서드 인자로 명시</li>\n<li>\n<p>Comparable 로 객체가 가지고 있는 정렬 기준이 아닌 새로운 기준을 부과 할때 사용</p>\n<ul>\n<li>객체에 Comparable가 없어도 사용 가능(sort() 에서 정렬 기준을 명시할때)</li>\n</ul>\n</li>\n<li>\n<p>ex) sort(list, CustomSort)</p>\n<ul>\n<li>class CustomSort implements Comparator<CustomSort></li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2>1. Comparable - 클래스 객체가 정렬 기준을 가지고 있자!</h2>\n<blockquote>\n<p>class.sort() 를 사용 할 때 인자를 지정 해주지 않아도 사용이 가능 한 이유는 해당 클래스 객체는 Comparable 인터페이스를 구현 하고 있기 때문이다.</p>\n</blockquote>\n<ul>\n<li>\n<p>구현 예시</p>\n<ul>\n<li>\n<p>sor(), max(), min() 등 정렬을 사용할 클래스 객체에 Comparable 인터페이스 구현 → compareTo() 를 오버라이드 한다.</p>\n<p>class Student implements Comparable<Student> {\nprivate int id;\nprivate int score = 0;</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@Override\npublic int compareTo(Student student) {\n    return this.getScore() - student.getScore();\n}</code></pre></div>\n<p>}</p>\n</li>\n</ul>\n</li>\n<li>\n<p>compareTo() 메서드</p>\n<ul>\n<li>Collections, Arrays에서 sort(), max(), min() 을 사용 할 때 compareTo() 메서드 사용</li>\n<li>\n<p>구현 방법</p>\n<ul>\n<li>this > 파라미터</li>\n<li>this &#x3C; 파라미터</li>\n<li>this == 파라미터</li>\n<li>this - 파라미터</li>\n<li>파라미터 - this</li>\n</ul>\n</li>\n<li>\n<p>정렬 기준:</p>\n<ol>\n<li>양수 리턴: 오름차순</li>\n<li>음수 리턴: 내림차순</li>\n<li>0 리턴: 변동없음</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>사용 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public Student maxScoreStudent(List&lt;Student&gt; studentList) {\n    return Collections.max(studentList);\n}\n\npublic List&lt;Student&gt; sort(List&lt;Student&gt; studentList){\n    studentList.stream().sorted();\n\t\treturn studentList;\n}</code></pre></div>\n</li>\n</ul>\n<blockquote>\n<p>Comparable 인터페이스가 없는 클래스 객체라면 Collections, Arrays에서 sort(), max(), min() 을 사용 할 때, 인자를 생략 할 수 없다!!</p>\n</blockquote>\n<ul>\n<li>왜?? 정렬 기준이 없으니까? 그럼 정렬 기준을 주입 해주면 되지 않을까?</li>\n</ul>\n<h2>2. Comparator - 정렬 기준을 알려줄게! 이 기준으로 정렬!!</h2>\n<p><img src=\"Untitled-6e740739-1d83-497d-8be2-d0f841e5b809.png\"></p>\n<blockquote>\n<p>클래스 객체의 지정된 정렬 기준을 따르고 싶지 않아 새로운 기준으로 정렬 하고 싶을 때 사용, 혹은 클래스 객체의 지정된 정렬 기준이 없을 때 사용</p>\n</blockquote>\n<ul>\n<li>\n<p>구현 예시</p>\n<ol>\n<li>\n<p>Comparator 인터페이스를 구현하여 정렬 기준 클래스 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class CustomSort implements Comparator&lt;Student&gt; {\n\n    @Override\n    public int compare(Student o1, Student o2) {\n        if (o1.getScore() &gt; o2.getScore()) {\n            return 1;\n        } else if (o1.getScore() == o2.getScore()) {\n            if (o1.getId() &lt; o2.getId()) {\n                return 1;\n            }\n        }\n        return -1;\n    }\n}\n\n//사용\npublic Student maxScoreStudentUsingComparator(List&lt;Student&gt; studentList) {\n    return studentList.stream().max(new CustomSort()).orElse(null);\n}</code></pre></div>\n</li>\n<li>\n<p>Comparator 인터페이스를 이용한 익명 클래스 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public Student maxScoreStudentUsingAnonymousComparatorClass(List&lt;Student&gt; studentList) {\n    return studentList.stream().max(new Comparator&lt;Student&gt;() {\n\n        @Override\n        public int compare(Student o1, Student o2) {\n            if (o1.getScore() &gt; o2.getScore()) {\n                return 1;\n            } else if (o1.getScore() == o2.getScore()) {\n                if (o1.getId() &lt; o2.getId()) {\n                    return 1;\n                }\n            }\n            return -1;\n        }\n    }).orElse(null);\n}</code></pre></div>\n</li>\n<li>\n<p>람다(Lamda) 를 이용하여 Comparator 인터페이스 구현</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public Student maxScoreStudentUsingLamda(List&lt;Student&gt; studentList) {\n    return studentList.stream().max((prevStudent, curentStudent) -&gt; prevStudent.getScore() - curentStudent.getScore()).orElse(null);\n}</code></pre></div>\n</li>\n</ol>\n</li>\n<li>\n<p>compare() 메서드</p>\n<ul>\n<li>Collections, Arrays에서 sort(), max(), min() 을 사용 할 때 compare() 메서드 사용</li>\n<li>\n<p>구현 방법</p>\n<ul>\n<li>파라미터1 > 파라미터2</li>\n<li>파라미터1 &#x3C; 파라미터2</li>\n<li>파라미터1 == 파라미터2</li>\n<li>파라미터1 - 파라미터2</li>\n<li>파라미터2 - 파라미터1</li>\n</ul>\n</li>\n<li>\n<p>정렬 기준:</p>\n<ol>\n<li>양수 리턴: 오름차순</li>\n<li>음수 리턴: 내림차순</li>\n<li>0 리턴: 변동없음</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>개인적으로 Comparator는 람다(Lamda) 방식으로 사용하는 것이 좋은것 같다.</p>\n</blockquote>\n<hr>\n<h2>PS - 소감쓰..</h2>\n<p>정리하지 않고 사용할 땐, 모르고 사용 했었던 것 같다.</p>\n<p>최근에 javascript 를 공부하고 자주 사용했었는데, 다시 Java 공부 하면서 Java 의 sort 사용과 Javascript의 sort 사용법이 비슷했던 것 같다. 그래서 더 잘 와 닿는 느낌을 받았다.</p>\n<p>정리 할 내용들이 많은데, 정리 하는 시간이 생각 보다 길었다.</p>\n<hr>\n<p>참고 사이트</p>\n<p><a href=\"https://cwondev.tistory.com/15\">자바 정렬 Java Comparable Comparator 확실히 알고 넘어가기</a></p>\n<p><a href=\"https://gmlwjd9405.github.io/2018/09/06/java-comparable-and-comparator.html\">[Java] Comparable와 Comparator의 차이와 사용법 - Heee’s Development Blog</a></p>","fields":{"tagSlugs":["/tags/comparable/","/tags/comparator/","/tags/normal-flow/","/tags/un-til-the-end/"],"slug":"/etc/comparable-comparator/"},"frontmatter":{"title":"JAVA-객체 정렬(비교)의 기준?Comparable, Comparator","tags":["Comparable","Comparator","Normal Flow","unTIL the end"],"date":"2019-06-26T05:06:35.750Z","description":"[unTIL the end] Java 객체를 정렬 하기위한 인터페이스 Comparable, Comparator 정리","path":"/etc/comparable-comparator/","category":"java"},"tableOfContents":"<ul>\n<li><a href=\"/etc/comparable-comparator/#tmi\">TMI</a></li>\n<li><a href=\"/etc/comparable-comparator/#%EA%B0%9D%EC%B2%B4-%EA%B8%B0%EC%A4%80\">객체 기준!!</a></li>\n<li><a href=\"/etc/comparable-comparator/#%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%A0%95%EB%A0%AC%EC%9D%98-%EA%B8%B0%EC%A4%80%EC%9D%84-%EC%A0%95%ED%95%98%EB%8A%94-%EB%91%90%EA%B0%80%EC%A7%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\">객체의 정렬의 기준을 정하는 두가지 인터페이스</a></li>\n<li><a href=\"/etc/comparable-comparator/#1-comparable---%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EC%A4%80%EC%9D%84-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EC%9E%90\">1. Comparable - 클래스 객체가 정렬 기준을 가지고 있자!</a></li>\n<li><a href=\"/etc/comparable-comparator/#2-comparator---%EC%A0%95%EB%A0%AC-%EA%B8%B0%EC%A4%80%EC%9D%84-%EC%95%8C%EB%A0%A4%EC%A4%84%EA%B2%8C-%EC%9D%B4-%EA%B8%B0%EC%A4%80%EC%9C%BC%EB%A1%9C-%EC%A0%95%EB%A0%AC\">2. Comparator - 정렬 기준을 알려줄게! 이 기준으로 정렬!!</a></li>\n<li><a href=\"/etc/comparable-comparator/#ps---%EC%86%8C%EA%B0%90%EC%93%B0\">PS - 소감쓰..</a></li>\n</ul>","headings":[{"value":"TMI","depth":2},{"value":"객체 기준!!","depth":2},{"value":"객체의 정렬의 기준을 정하는 두가지 인터페이스","depth":2},{"value":"1. Comparable - 클래스 객체가 정렬 기준을 가지고 있자!","depth":2},{"value":"2. Comparator - 정렬 기준을 알려줄게! 이 기준으로 정렬!!","depth":2},{"value":"PS - 소감쓰..","depth":2}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/etc/comparable-comparator/"}}}