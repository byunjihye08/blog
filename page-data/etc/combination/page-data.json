{"componentChunkName":"component---src-templates-post-template-jsx","path":"/etc/combination/","result":{"data":{"site":{"siteMetadata":{"title":"변지혜 블로그","subtitle":"행동하는 개발자","copyright":"© All rights reserved.","author":{"name":"변지혜","twitter":"#"},"disqusShortname":"regyu","url":"https://wisdom08.netlify.com/"}},"markdownRemark":{"id":"9644af90-3db9-5ff2-9509-51ec1a7a8e2b","html":"<h1>[JAVA]-조합(Combination)</h1>\n<p><img src=\"Untitled-8ea39325-eb25-4417-a718-de94f245cb85.png\"></p>\n<h2>TMI</h2>\n<p><a href=\"https://programmers.co.kr/learn/courses/10004\">코딩테스트와 실무 역량 모두 잡는 알고리즘 스터디(Java) 2기 | 프로그래머스</a></p>\n<p>시작부터 TMI 가 시작된다. 프로그래머스에서 진행하는 코딩테스트-JAVA 를 온라인 스터디 진행하면서 배운 내용을 정리 한다. </p>\n<p><a href=\"https://school.programmers.co.kr/courses/10022/lessons/58131\">알고리즘 연습 - 소수 만들기 | 프로그래머스</a></p>\n<p>내가 풀었던 문제 중 소수 만들기 문제를 풀면서 조합을 만들기 위해 Picker 클래스를 만들게 되었다. 피드백을 받아 제네릭을 사용하여 범용성있는 클래스를 구성해보았다.</p>\n<h2>n개중 r개를 선택하는 방법의 수</h2>\n<p><img src=\"Untitled-b3e8d277-9451-4ee5-8121-bb2065f42d88.png\"></p>\n<blockquote>\n<p>예시</p>\n</blockquote>\n<ul>\n<li>int[] numbers = {1,2,3};</li>\n<li>집합에서 2개의 조합을 구하는 경우 (순서x, 중복x)</li>\n<li>[[1, 2], [1, 3], [2, 3]]</li>\n<li>\n<p>순서나 중복을 허용했다면</p>\n<p>[[1,2],[1,3],[2,1],[2,3],[3,1],[3,2]] 가 될것이다.(하지만 조합은 순서x 중복x )</p>\n</li>\n</ul>\n<p><img src=\"Untitled-23491a6c-d4cf-4be3-8c03-ffb44db7c9a9.png\"></p>\n<blockquote>\n<p>선택된 숫자는 Stack에 넣는 것 처럼 생각하면 이해하기가 쉽다고 생각한다.</p>\n</blockquote>\n<h2>조합 점화식</h2>\n<p><img src=\"Untitled-8ad919e7-0ef8-4616-b1ef-1c99a9d19334.png\"></p>\n<ol>\n<li>\n<p>선택하여 뽑은 경우 [n-1 C r-1]</p>\n<blockquote>\n<p>ex) 1을 뽑은경우 , 전체 갯수, 뽑아야 될 숫자 각각 1씩 감소, n개에서 1개를 뽑혔기 때문에 n-1 개중에서 현재 index를 선택한 경우 r-1 (선택,뽑을 수 있는 갯수)</p>\n</blockquote>\n</li>\n<li>\n<p>선택하지 않고 뽑지 않은 경우 [n-1 C r]</p>\n<blockquote>\n<p>ex) 이전에 1을 뽑지 않은경우, 전체 갯, n개에서 1개를 뽑혔기 때문에 n-1 개중에서 현재 index를 선택하지 않았을 경우 r(선택,뽑을 수 있는 갯수)</p>\n</blockquote>\n</li>\n<li>n개중 r를 선택하는 조합: 1의 경우와 2의 경우 (경우의 수:합의 법칙)</li>\n</ol>\n<h2>소스코드 (Picker 클래스 설명)</h2>\n<ul>\n<li>\n<p>필드</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">private T[] array; //제네릭 타입\nprivate List&lt;Set&lt;T&gt;&gt; selectedCombinationList; // 반환할 리스트\n//ex) [[1, 2], [1, 3], [2, 3]]</code></pre></div>\n</li>\n<li>\n<p>getSelectedCombinationList()</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  List&lt;Set&lt;T&gt;&gt; getSelectedCombinationList(selecteCount) {\n      Stack&lt;T&gt; selectedNumber = new Stack&lt;&gt;();\n      doCombination(array.length, selecteCount, 0, selectedNumber);\n      return selectedCombinationList;\n  }</code></pre></div>\n<ul>\n<li>조합 리스트를 반환하는 메소드</li>\n<li><code class=\"language-text\">int selecteCount</code> 를 입력 받아 몇 개 선택할지 인자로 받는다.</li>\n<li>doCombination() 를 실행하여 조합을 만든다.</li>\n</ul>\n</li>\n<li>\n<p>doCombination()</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">private void doCombination(int totalCount, int selecteCount, int index, Stack&lt;T&gt; selectedNumber) {\n    Stack&lt;T&gt; stackOfSelectValue = new Stack&lt;&gt;();\n    stackOfSelectValue.addAll(selectedNumber);\n\n    if (selecteCount == 0) {\n        addSelectedValueList(selectedNumber);\n    } else if (totalCount == selecteCount) {\n        for (int i = 0; i &lt; totalCount; i++) {\n            selectedNumber.add(array[index + i]);\n        }\n        addSelectedValueList(selectedNumber);\n    } else {\n        stackOfSelectValue.add(array[index]);\n        doCombination(totalCount - 1, selecteCount - 1, index + 1, stackOfSelectValue);\n\n        stackOfSelectValue.pop();\n        doCombination(totalCount - 1, selecteCount, index + 1, stackOfSelectValue);\n    }\n}</code></pre></div>\n<ul>\n<li>재귀 함수</li>\n<li><code class=\"language-text\">if (selecteCount == 0)</code> 더이상 뽑을 수가 없는 경우</li>\n<li><code class=\"language-text\">else if (totalCount == selecteCount)</code> 모두 선택할 경우</li>\n<li>\n<p><code class=\"language-text\">else</code> 일반 적인 경우 (재귀 실행할 구문)</p>\n<ol>\n<li>선택할 경우</li>\n<li>선택하지 않을 경우</li>\n</ol>\n<p><img src=\"Untitled-23491a6c-d4cf-4be3-8c03-ffb44db7c9a9.png\"></p>\n<blockquote>\n<p>개인적으로 선택된 숫자는 Stack에 넣는 것이 동작 방식을 이해하기 쉬웠다. 굳이 stack을 사용할 필요는 없었다. array나 list 나 set 도 가능하기도 하다.</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<h3>전체 소스코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Picker&lt;T&gt; {\n    private T[] array;\n    private List&lt;Set&lt;T&gt;&gt; selectedCombinationList;\n\n    Picker(T[] array) {\n        this.array = array;\n        selectedCombinationList = new ArrayList&lt;&gt;();\n    }\n\n    List&lt;Set&lt;T&gt;&gt; getSelectedCombinationList(int selecteCount) {\n        Stack&lt;T&gt; selectedNumber = new Stack&lt;&gt;();\n        doCombination(array.length, selecteCount, 0, selectedNumber);\n        return selectedCombinationList;\n    }\n\n    private void addSelectedValueList(Stack&lt;T&gt; selectedNumber) {\n        Set&lt;T&gt; selectedNumbers = new HashSet&lt;&gt;(selectedNumber);\n        selectedCombinationList.add(selectedNumbers);\n    }\n\n    private void doCombination(int totalCount, int selecteCount, int index, Stack&lt;T&gt; selectedNumber) {\n        Stack&lt;T&gt; stackOfSelectValue = new Stack&lt;&gt;();\n        stackOfSelectValue.addAll(selectedNumber);\n\n        if (selecteCount == 0) {\n            addSelectedValueList(selectedNumber);\n        } else if (totalCount == selecteCount) {\n            for (int i = 0; i &lt; totalCount; i++) {\n                selectedNumber.add(array[index + i]);\n            }\n            addSelectedValueList(selectedNumber);\n        } else {\n            stackOfSelectValue.add(array[index]);\n            doCombination(totalCount - 1, selecteCount - 1, index + 1, stackOfSelectValue);\n\n            stackOfSelectValue.pop();\n            doCombination(totalCount - 1, selecteCount, index + 1, stackOfSelectValue);\n        }\n    }\n}</code></pre></div>\n<h3>Picker 클래스 사용법</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">int[] nums = {1, 2, 3};\nInteger[] numbers = Arrays.stream(nums).boxed().toArray(Integer[]::new);\nList&lt;Set&lt;Integer&gt;&gt; combinationNumberList = new Picker&lt;&gt;(numbers).getSelectedCombinationList(2);</code></pre></div>\n<h2>PS</h2>\n<ul>\n<li><code class=\"language-text\">int[] nums</code> 가 아닌 <code class=\"language-text\">String[] name</code> 와 같이 제네릭타입을 지정하여 여러 타입의 Array 의 조합을 만들수 있게 Pciker 클래스를 작성하였습니다.</li>\n<li>조합을 만드는 클래스를 만들어 보았으니 다음은 순열을 만들어 주는 클래스를 만들어 보겠습니다. (조합과 매우 유사합니다.)</li>\n<li><code class=\"language-text\">List&lt;Set&lt;T&gt;&gt; getSelectedCombinationList(int selecteCount)</code> 의 반환타입이 <code class=\"language-text\">List&lt;Set&lt;T&gt;&gt;</code> Set in List 인데 반환 타입은 원하는 대로 변경을 해도 괜찮을 것 같다. List in List 를 피하기 위해 Set<T> 로 하였지만 array in List 형식으로 해도 괜찮을 것 같다는 생각을 했다. ex) List&#x3C;Integer[]></li>\n</ul>\n<hr>\n<p>참고 사이트</p>\n<p><a href=\"https://bumbums.tistory.com/2\">자바로 만드는 조합(Combination) 알고리즘</a></p>\n<p><a href=\"https://limkydev.tistory.com/156\">[Algorithm] JAVA로 중복이 없고, 순서도 없는 조합(Combination) 구하기!</a></p>","fields":{"tagSlugs":["/tags/combination/","/tags/재귀/","/tags/조합/"],"slug":"/etc/combination/"},"frontmatter":{"title":"JAVA-조합(Combination)","tags":["combination","재귀","조합"],"date":"2019-07-14T05:06:35.750Z","description":"[unTIL the end] Java 배열 중 선택 갯수를 지정하여 조합을 만드는 방법에 대한 설명입니다. (미리보기: 제네릭 타입을 이용한 Picker 클래스 설명)","path":"/etc/combination/","category":"java"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"/etc/combination/#java-%EC%A1%B0%ED%95%A9combination\">JAVA-조합(Combination)</a></p>\n<ul>\n<li><a href=\"/etc/combination/#tmi\">TMI</a></li>\n<li><a href=\"/etc/combination/#n%EA%B0%9C%EC%A4%91-r%EA%B0%9C%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%98-%EC%88%98\">n개중 r개를 선택하는 방법의 수</a></li>\n<li><a href=\"/etc/combination/#%EC%A1%B0%ED%95%A9-%EC%A0%90%ED%99%94%EC%8B%9D\">조합 점화식</a></li>\n<li>\n<p><a href=\"/etc/combination/#%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C-picker-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A4%EB%AA%85\">소스코드 (Picker 클래스 설명)</a></p>\n<ul>\n<li><a href=\"/etc/combination/#%EC%A0%84%EC%B2%B4-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C\">전체 소스코드</a></li>\n<li><a href=\"/etc/combination/#picker-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%82%AC%EC%9A%A9%EB%B2%95\">Picker 클래스 사용법</a></li>\n</ul>\n</li>\n<li><a href=\"/etc/combination/#ps\">PS</a></li>\n</ul>\n</li>\n</ul>","headings":[{"value":"JAVA-조합(Combination)","depth":1},{"value":"TMI","depth":2},{"value":"n개중 r개를 선택하는 방법의 수","depth":2},{"value":"조합 점화식","depth":2},{"value":"소스코드 (Picker 클래스 설명)","depth":2},{"value":"전체 소스코드","depth":3},{"value":"Picker 클래스 사용법","depth":3},{"value":"PS","depth":2}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/etc/combination/"}}}